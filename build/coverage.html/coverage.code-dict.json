{"/home/travis/build/npmtest/node-npmtest-npm-cache/test.js":"/* istanbul instrument in package npmtest_npm_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-cache/lib.npmtest_npm_cache.js":"/* istanbul instrument in package npmtest_npm_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_cache = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_cache = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-cache/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-cache && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_cache\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_cache.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npm_cache.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_cache.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npm_cache.__dirname + '/lib.npmtest_npm_cache.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-cache/node_modules/npm-cache/index.js":"#! /usr/bin/env node\n'use strict';\n\nvar fs = require('fs-extra');\nvar path = require('path');\nvar parser = require('nomnom');\nvar async = require('async');\nvar rimraf = require('rimraf');\n\nvar logger = require('./util/logger');\nvar ParseUtils = require('./util/parseUtils');\nvar CacheDependencyManager = require('./cacheDependencyManagers/cacheDependencyManager');\n\n// Main entry point for npm-cache\nvar main = function () {\n  // Parse CLI Args\n  parser.command('install')\n    .callback(installDependencies)\n    .option('forceRefresh', {\n      abbr: 'r',\n      flag: true,\n      default: false,\n      help: 'force installing dependencies from package manager without cache'\n    })\n    .help('install specified dependencies');\n\n  parser.command('clean')\n    .callback(cleanCache)\n    .help('clear cache directory');\n\n  parser.command('hash')\n    .callback(reportHash)\n    .help('reports the current working hash');\n\n  var defaultCacheDirectory = process.env.NPM_CACHE_DIR;\n  if (defaultCacheDirectory === undefined) {\n    var homeDirectory = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n    if (homeDirectory !== undefined) {\n      defaultCacheDirectory = path.resolve(homeDirectory, '.package_cache');\n    } else {\n      defaultCacheDirectory = path.resolve('/tmp', '.package_cache');\n    }\n  }\n\n  parser.option('cacheDirectory', {\n    default: defaultCacheDirectory,\n    abbr: 'c',\n    help: 'directory where dependencies will be cached'\n  });\n  parser.option('noArchive', {\n    abbr: 'd',\n    help: 'when installing a new dependency set, those dependencies will be stored uncompressed. This requires more disk space but notably increases performance',\n    flag: true\n  });\n\n  parser.option('version', {\n    abbr: 'v',\n    help: 'displays version info and exit',\n    flag: true,\n    callback: function () {\n      var packagePath = path.resolve(__dirname, 'package.json');\n      var packageFile = fs.readFileSync(packagePath);\n      var packageParsed = JSON.parse(packageFile);\n      console.log(packageParsed.version);\n      process.exit(0);\n    }\n  });\n\n\n  var examples = [\n    'Examples:',\n    '\\tnpm-cache install\\t# try to install npm, bower, and composer components',\n    '\\tnpm-cache install bower\\t# install only bower components',\n    '\\tnpm-cache install bower npm\\t# install bower and npm components',\n    '\\tnpm-cache install bower --allow-root composer --dry-run\\t# install bower with allow-root, and composer with --dry-run',\n    '\\tnpm-cache install --cacheDirectory /home/cache/ bower \\t# install components using /home/cache as cache directory',\n    '\\tnpm-cache install --forceRefresh  bower\\t# force installing dependencies from package manager without cache',\n    '\\tnpm-cache install --noArchive npm\\t# do not compress/archive the cached dependencies',\n    '\\tnpm-cache clean\\t# cleans out all cached files in cache directory',\n    '\\tnpm-cache hash\\t# reports the current working hash'\n  ];\n  parser.help(examples.join('\\n'));\n\n  var npmCacheArgs = ParseUtils.getNpmCacheArgs();\n  parser.parse(npmCacheArgs);\n};\n\n// Creates cache directory if it does not exist yet\nvar prepareCacheDirectory = function (cacheDirectory) {\n  logger.logInfo('using ' + cacheDirectory + ' as cache directory');\n  if (! fs.existsSync(cacheDirectory)) {\n    // create directory if it doesn't exist\n    fs.mkdirsSync(cacheDirectory);\n    logger.logInfo('creating cache directory');\n  }\n};\n\n// npm-cache command handlers\n\n// main method for installing specified dependencies\nvar installDependencies = function (opts) {\n  prepareCacheDirectory(opts.cacheDirectory);\n\n  var availableManagers = CacheDependencyManager.getAvailableManagers();\n  var managerArguments = ParseUtils.getManagerArgs();\n  var managers = Object.keys(managerArguments);\n\n  async.each(\n    managers,\n    function startManager (managerName, callback) {\n      var managerConfig = require(availableManagers[managerName]);\n      managerConfig.cacheDirectory = opts.cacheDirectory;\n      managerConfig.forceRefresh = opts.forceRefresh;\n      managerConfig.noArchive = opts.noArchive;\n      managerConfig.installOptions = managerArguments[managerName];\n      var manager = new CacheDependencyManager(managerConfig);\n      manager.loadDependencies(callback);\n    },\n    function onInstalled (error) {\n      if (error === null) {\n        logger.logInfo('successfully installed all dependencies');\n        process.exit(0);\n      } else {\n        logger.logError('error installing dependencies');\n        process.exit(1);\n      }\n    }\n  );\n};\n\nvar reportHash = function (opts) {\n  var availableManagers = CacheDependencyManager.getAvailableManagers();\n  var managerArguments = ParseUtils.getManagerArgs();\n  var managers = Object.keys(managerArguments);\n\n  if (managers.length > 1) {\n    logger.logError('can only calculate hash for one dependency manager at a time');\n    process.exit(1);\n  }\n\n  async.each(\n    managers,\n    function calculateHash (managerName) {\n      var managerConfig = require(availableManagers[managerName]);\n      managerConfig.cacheDirectory = opts.cacheDirectory;\n\n      var hash = managerConfig.getFileHash(managerConfig.configPath);\n      console.log(hash);\n    }\n  );\n};\n\n\n// Recursively lists files in directory up to maxDepth\nvar cachedFileListHelper = function (dir, fileList, regex, currDepth, maxDepth) {\n  if (currDepth === maxDepth) {\n    return fileList;\n  }\n\n  var dirFiles = fs.readdirSync(dir);\n  dirFiles.forEach(\n    function (file) {\n      var filePath = path.join(dir, file);\n      if (regex.test(filePath)) {\n        fileList.push(filePath);\n      }\n\n      if (fs.statSync(filePath).isDirectory()) {\n        cachedFileListHelper(filePath, fileList, regex, currDepth + 1, maxDepth);\n      }\n    }\n  );\n  return fileList;\n};\n\n// Returns list of candidate cached files\nvar getCachedFileList = function (baseDir) {\n  var cacheRegex = /[0-9a-f]{32}[\\.tar\\.gz]*$/i;\n  return cachedFileListHelper(baseDir, [], cacheRegex, 0, 3);\n};\n\n// Removes all cached dependencies from cache directory\nvar cleanCache = function (opts) {\n  prepareCacheDirectory(opts.cacheDirectory);\n\n  var cachedFileList = getCachedFileList(opts.cacheDirectory);\n  cachedFileList.forEach(\n    function (filePath) {\n      rimraf.sync(filePath);\n      // fs.unlinkSync(filePath);\n    }\n  );\n\n  logger.logInfo('cleaned ' + cachedFileList.length + ' files from cache directory');\n};\n\n\nmain();","/home/travis/build/npmtest/node-npmtest-npm-cache/node_modules/npm-cache/util/logger.js":"'use strict';\n\nexports.logError = function (errorMessage) {\n  console.log('[npm-cache] [ERROR] ' + errorMessage);\n};\n\nexports.logInfo = function (message) {\n  console.log('[npm-cache] [INFO] ' + message);\n};\n\n","/home/travis/build/npmtest/node-npmtest-npm-cache/node_modules/npm-cache/util/parseUtils.js":"'use strict';\n\nvar _ = require('lodash');\nvar CacheDependencyManager = require('../cacheDependencyManagers/cacheDependencyManager');\n\n/**\n * Returns an array of strings containing command line arguments\n * for npm-cache. Excludes any arguments to be passed to package\n * managers\n *\n * Ex: npm-cache --forceRefresh --cacheDirectory /tmp bower --allow-root\n *  Returns [--forceRefresh, --cacheDirectory, /tmp]\n *\n * @return {string[]} args\n */\nexports.getNpmCacheArgs = function () {\n  var npmCacheArgs = [];\n\n  var availableManagers = CacheDependencyManager.getAvailableManagers();\n\n  var allArguments = process.argv.slice(2);\n  for (var i = 0; i < allArguments.length; i++) {\n    var currArgument = allArguments[i];\n    if (currArgument in availableManagers) {\n      break;\n    } else {\n      npmCacheArgs.push(currArgument);\n    }\n  }\n  return npmCacheArgs;\n};\n\n\n/**\n *\n * Parses command line args and returns an object specifying which managers\n * were requested along with their command line arguments\n *\n * Ex: npm-cache install bower --allow-root --save npm --save\n *  Returns {bower: '--allow-root --save', npm: --save}\n *\n * @return {Object} managerArgs\n */\nexports.getManagerArgs = function () {\n  var managers = {};\n  var allArguments = process.argv.slice(3); // strip off 'node', 'index.js', and 'install' from arguments list\n  var availableManagers = CacheDependencyManager.getAvailableManagers();\n  var currManager = null;\n\n  // First determine which managers were requested by looking at command line arguments\n  _.forEach(\n    allArguments,\n    function addManagerArgument (argument) {\n      if (argument in availableManagers) {\n        managers[argument] = '';\n        currManager = argument;\n      } else if (currManager !== null) {\n        managers[currManager] += argument + ' ';\n      }\n    }\n  );\n\n  // If no managers were specified, try installing everything by default!\n  if (_.isEmpty(managers)) {\n    // add all keys from available managers as keys here\n    _.forEach(\n      CacheDependencyManager.getAvailableDefaultManagers(),\n      function addManager (managerPath, manager) {\n        managers[manager] = '';\n      }\n    );\n  }\n\n  return managers;\n};\n","/home/travis/build/npmtest/node-npmtest-npm-cache/node_modules/npm-cache/cacheDependencyManagers/cacheDependencyManager.js":"'use strict';\n\nvar fs = require('fs-extra');\nvar path = require('path');\nvar logger = require('../util/logger');\nvar shell = require('shelljs');\nvar which = require('which');\nvar tar = require('tar-fs');\nvar fstream = require('fstream');\nvar md5 = require('md5');\nvar tmp = require('tmp');\nvar _ = require('lodash');\nvar zlib = require('zlib');\n\nvar cacheVersion = '1';\n\nfunction CacheDependencyManager (config) {\n  this.config = config;\n}\n\n// Given a path relative to process' current working directory,\n// returns a normalized absolute path\nvar getAbsolutePath = function (relativePath) {\n  return path.resolve(process.cwd(), relativePath);\n};\n\nvar getFileBackupPath = function (installedDirectory) {\n  return path.join(installedDirectory, '.npm-cache');\n};\n\nvar getFileBackupFilename = function (file) {\n  return path.basename(file) + '_' + md5(file);\n};\n\nCacheDependencyManager.prototype.cacheLogInfo = function (message) {\n  logger.logInfo('[' + this.config.cliName + '] ' + message);\n};\n\nCacheDependencyManager.prototype.cacheLogError = function (error) {\n  logger.logError('[' + this.config.cliName + '] ' + error);\n};\n\n\nCacheDependencyManager.prototype.installDependencies = function () {\n  var error = null;\n  var installCommand = this.config.installCommand + ' ' + this.config.installOptions;\n  installCommand = installCommand.trim();\n  this.cacheLogInfo('running [' + installCommand + ']...');\n  if (shell.exec(installCommand).code !== 0) {\n    error = 'error running ' + this.config.installCommand;\n    this.cacheLogError(error);\n  } else {\n    this.cacheLogInfo('installed ' + this.config.cliName + ' dependencies, now archiving');\n  }\n  return error;\n};\n\nCacheDependencyManager.prototype.backupFile = function (backupPath, file) {\n  var sourceFile = getAbsolutePath(file);\n  var backupFilename = getFileBackupFilename(file);\n  var backupFile = path.join(backupPath, backupFilename);\n  if (!fs.existsSync(sourceFile)) {\n    this.cacheLogError('backup file [file not found]:' + file);\n    return;\n  }\n\n  fs.mkdirsSync(backupPath);\n  fs.copySync(sourceFile, backupFile);\n  this.cacheLogInfo('backup file: ' + file);\n};\n\nCacheDependencyManager.prototype.restoreFile = function (backupPath, file) {\n  var sourceFile = getAbsolutePath(file);\n  var backupFilename = getFileBackupFilename(file);\n  var backupFile = path.join(backupPath, backupFilename);\n  if (!fs.existsSync(backupFile)) {\n    this.cacheLogError('restore file [file not found]:' + file);\n    return;\n  }\n\n  fs.copySync(backupFile, sourceFile);\n  this.cacheLogInfo('restore file: ' + file);\n};\n\nCacheDependencyManager.prototype.archiveDependencies = function (cacheDirectory, cachePath, callback) {\n  var self = this;\n  var error = null;\n  var installedDirectory = getAbsolutePath(this.config.installDirectory);\n  var fileBackupDirectory = getFileBackupPath(installedDirectory);\n  this.cacheLogInfo('archiving dependencies from ' + installedDirectory);\n\n  if (!fs.existsSync(installedDirectory)) {\n    this.cacheLogInfo('skipping archive. Install directory does not exist.');\n    return error;\n  }\n\n  if (this.config.addToArchiveAndRestore) {\n    this.backupFile(fileBackupDirectory, this.config.addToArchiveAndRestore);\n  }\n\n  // Make sure cache directory is created\n  fs.mkdirsSync(cacheDirectory);\n\n  var tmpName = tmp.tmpNameSync({\n    dir: cacheDirectory\n  });\n  tmp.setGracefulCleanup();\n\n  function onError(error) {\n    self.cacheLogError('error tar-ing ' + installedDirectory + ' :' + error);\n    onFinally();\n    callback(error);\n  }\n\n  function onEnd() {\n    if (fs.existsSync(cachePath)) {\n      fs.removeSync(cachePath);\n    }\n    fs.renameSync(tmpName, cachePath);\n    self.cacheLogInfo('installed and archived dependencies');\n    onFinally();\n    callback();\n  }\n\n  function onFinally() {\n    if (fs.existsSync(fileBackupDirectory)) {\n      fs.removeSync(fileBackupDirectory);\n    }\n\n    if (fs.existsSync(tmpName)) {\n      fs.removeSync(tmpName);\n    }\n  }\n\n  var installedDirectoryStream = fstream.Reader({path: installedDirectory}).on('error', onError);\n  // TODO: speed this up\n  if (this.config.noArchive) {\n    installedDirectoryStream\n      .on('end', onEnd)\n      .pipe(fstream.Writer({path: tmpName, type: 'Directory'}));\n\n  } else {\n    tar.pack(installedDirectory)\n      .pipe(zlib.createGzip())\n      .pipe(fs.createWriteStream(tmpName))\n      .on('error', onError)\n      .on('finish', onEnd);\n  }\n};\n\nCacheDependencyManager.prototype.installCachedDependencies = function (cachePath, compressedCacheExists, callback) {\n  var self = this;\n  var installDirectory = getAbsolutePath(this.config.installDirectory);\n  var fileBackupDirectory = getFileBackupPath(installDirectory);\n  var targetPath = path.dirname(installDirectory);\n  this.cacheLogInfo('clearing installed dependencies at ' + installDirectory);\n  fs.removeSync(installDirectory);\n  this.cacheLogInfo('...cleared');\n  this.cacheLogInfo('retrieving dependencies from ' + cachePath);\n\n  function onError(error) {\n    self.cacheLogError('Error retrieving ' + cachePath + ': ' + error);\n    callback(error);\n  }\n  function onEnd() {\n    if (self.config.addToArchiveAndRestore) {\n      self.restoreFile(fileBackupDirectory, self.config.addToArchiveAndRestore);\n      fs.removeSync(fileBackupDirectory);\n    }\n    self.cacheLogInfo('done extracting');\n    callback();\n  }\n\n  if (compressedCacheExists) {\n    fs.createReadStream(cachePath)\n      .pipe(zlib.createGunzip())\n      .pipe(tar.extract(installDirectory))\n      .on('error', onError)\n      .on('finish', onEnd);\n  } else {\n    fstream.Reader(cachePath)\n        .on('error', onError)\n        .on('end', onEnd)\n        .pipe(fstream.Writer(targetPath));\n  }\n};\n\n\nCacheDependencyManager.prototype.loadDependencies = function (callback) {\n  var self = this;\n  var error = null;\n\n  // Check if config file for dependency manager exists\n  if (! fs.existsSync(this.config.configPath)) {\n    this.cacheLogInfo('Dependency config file ' + this.config.configPath + ' does not exist. Skipping install');\n    callback(null);\n    return;\n  }\n  this.cacheLogInfo('config file exists');\n\n  // Check if package manger CLI is installed\n  try {\n    which.sync(this.config.cliName);\n    this.cacheLogInfo('cli exists');\n  }\n  catch (e) {\n    error = 'Command line tool ' + this.config.cliName + ' not installed';\n    this.cacheLogError(error);\n    callback(error);\n    return;\n  }\n\n  // Get hash of dependency config file\n  var hash = this.config.getFileHash(this.config.configPath);\n  hash = md5(cacheVersion + hash);\n  this.cacheLogInfo('hash of ' + this.config.configPath + ': ' + hash);\n  // cachePath is absolute path to where local cache of dependencies is located\n  var cacheDirectory = path.resolve(this.config.cacheDirectory, this.config.cliName, this.config.getCliVersion());\n  var cachePathArchive = path.resolve(cacheDirectory, hash + '.tar.gz');\n  var cachePathNotArchived = path.resolve(cacheDirectory, hash);\n\n  // Check if local cache of dependencies exists\n  var cacheArchiveExists = fs.existsSync(cachePathArchive);\n  var cacheNotArchivedExists = fs.existsSync(cachePathNotArchived);\n  if (!this.config.forceRefresh && (cacheArchiveExists || cacheNotArchivedExists)) {\n    this.cacheLogInfo('cache exists');\n\n    // Try to retrieve cached dependencies\n    this.installCachedDependencies(\n      cacheArchiveExists ? cachePathArchive : cachePathNotArchived,\n      cacheArchiveExists,\n      callback\n    );\n\n  } else { // install dependencies with CLI tool and cache\n    // Try to install dependencies using package manager\n    error = this.installDependencies();\n    if (error !== null) {\n      callback(error);\n      return;\n    }\n\n    // Try to archive newly installed dependencies\n    var cachePathWithInstalledDirectory = path.resolve(cachePathNotArchived, this.config.installDirectory);\n      this.archiveDependencies(\n      this.config.noArchive ? cachePathNotArchived : cacheDirectory,\n      this.config.noArchive ? cachePathWithInstalledDirectory : cachePathArchive,\n      callback\n    );\n  }\n};\n\n/**\n * only return 'composer', 'npm' and 'bower' thereby `npm-cache install` doesn't change behavior if managers are added\n *\n * @returns {Object} availableDefaultManagers\n */\nCacheDependencyManager.getAvailableDefaultManagers = function() {\n  return _.pick(CacheDependencyManager.getAvailableManagers(), ['composer', 'npm', 'bower']);\n};\n\n/**\n * Looks for available package manager configs in cacheDependencyManagers\n * directory. Returns an object with package manager names as keys\n * and absolute paths to configs as values\n *\n * Ex: {\n *  npm: /usr/local/lib/node_modules/npm-cache/cacheDependencyMangers/npmConfig.js,\n *  bower: /usr/local/lib/node_modules/npm-cache/cacheDependencyMangers/bowerConfig.js\n * }\n *\n * @return {Object} availableManagers\n */\nCacheDependencyManager.getAvailableManagers = function () {\n  if (CacheDependencyManager.managers === undefined) {\n    CacheDependencyManager.managers = {};\n    var files = fs.readdirSync(__dirname);\n    var managerRegex = /(\\S+)Config\\.js/;\n    files.forEach(\n      function addAvailableManager (file) {\n        var result = managerRegex.exec(file);\n        if (result !== null) {\n          var managerName = result[1];\n          CacheDependencyManager.managers[managerName] = path.join(__dirname, file);\n        }\n      }\n    );\n  }\n  return CacheDependencyManager.managers;\n};\n\nmodule.exports = CacheDependencyManager;\n","/home/travis/build/npmtest/node-npmtest-npm-cache/node_modules/npm-cache/cacheDependencyManagers/bowerConfig.js":"'use strict';\n\nvar path = require('path');\nvar shell = require('shelljs');\nvar fs = require('fs');\nvar md5 = require('md5');\nvar logger = require('../util/logger');\n\nvar getBowerInstallDirectory = function () {\n  var bowerComponentLocation = 'bower_components';\n  var bowerRcPath = path.resolve(process.cwd(), '.bowerrc');\n  if (fs.existsSync(bowerRcPath)) {\n    var bowerRcFile = fs.readFileSync(bowerRcPath);\n    var bowerRc = JSON.parse(bowerRcFile);\n    if (bowerRc.directory) {\n      bowerComponentLocation = bowerRc.directory;\n      logger.logInfo('[bower] bower_components located at ' + bowerComponentLocation + ' per bowerrc');\n    }\n  }\n  return bowerComponentLocation;\n};\n\n\nfunction getFileHash(filePath) {\n  var json = JSON.parse(fs.readFileSync(filePath));\n  return md5(JSON.stringify({\n    dependencies: json.dependencies,\n    devDependencies: json.devDependencies,\n    overrides: json.overrides\n  }));\n};\n\nmodule.exports = {\n  cliName: 'bower',\n  getCliVersion: function getNpmVersion () {\n    return shell.exec('bower --version', {silent: true}).output.trim();\n  },\n  configPath: path.resolve(process.cwd(), 'bower.json'),\n  installDirectory: getBowerInstallDirectory(),\n  installCommand: 'bower install',\n  getFileHash: getFileHash\n};\n","/home/travis/build/npmtest/node-npmtest-npm-cache/node_modules/npm-cache/cacheDependencyManagers/composerConfig.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar shell = require('shelljs');\nvar logger = require('../util/logger');\nvar md5 = require('md5');\nvar isUsingComposerLock = null;\n\n// Returns path to configuration file for composer. Uses\n// composer.lock if it exists; otherwise,\n// defaults to composer.json\nvar getComposerConfigPath = function () {\n  var composerLockPath = path.resolve(process.cwd(), 'composer.lock');\n  var composerJsonPath = path.resolve(process.cwd(), 'composer.json');\n\n  if (isUsingComposerLock === null) {\n    if (fs.existsSync(composerLockPath)) {\n      logger.logInfo('[composer] using composer.lock instead of composer.json');\n      isUsingComposerLock = true;\n    }  else {\n      isUsingComposerLock = false;\n    }\n  }\n\n  return isUsingComposerLock ? composerLockPath : composerJsonPath;\n};\n\n// Composer.json can specify a custom vendor directory\n// Let's get it if we can!\nvar getComposerInstallDirectory = function () {\n  var composerInstallDirectory = 'vendor';\n\n  var exists = null;\n  try {\n    exists = fs.statSync(getComposerConfigPath());\n  } catch (e) {}\n\n  if (exists !== null) {\n    var composerConfig = JSON.parse(fs.readFileSync(getComposerConfigPath()));\n    if ('config' in composerConfig && 'vendor-dir' in composerConfig.config) {\n      composerInstallDirectory = composerConfig.config['vendor-dir'];\n    }\n  }\n  return composerInstallDirectory;\n};\n\n// Function to extract composer version number\nvar getCliVersion = function () {\n  var version = 'UnknownComposer';\n  var versionString = shell.exec('composer --version', {silent: true}).output;\n  // Example below:\n  //    Composer version 1.0.0-alpha9 2014-12-07 17:15:20\n  var versionRegex = /Composer version (\\S+)/;\n  var result = versionRegex.exec(versionString);\n  if (result !== null) {\n    version = result[1];\n  } else {\n    logger.logInfo('Could not find composer version from version string: ' + versionString);\n  }\n  return version;\n};\n\nfunction getFileHash(filePath) {\n  var json = JSON.parse(fs.readFileSync(filePath));\n\n  if (isUsingComposerLock) {\n    return json['content-hash'];\n  }\n\n  return md5(JSON.stringify({\n    packages: json.require,\n    packagesDev: json['require-dev'],\n    repos: json.repositories\n  }));\n};\n\nmodule.exports = {\n  cliName: 'composer',\n  getCliVersion: getCliVersion,\n  configPath: getComposerConfigPath(),\n  installDirectory: getComposerInstallDirectory(),\n  installCommand: 'composer install',\n  getFileHash: getFileHash\n};\n","/home/travis/build/npmtest/node-npmtest-npm-cache/node_modules/npm-cache/cacheDependencyManagers/jspmConfig.js":"'use strict';\n\nvar path = require('path');\nvar shell = require('shelljs');\nvar fs = require('fs');\nvar md5 = require('md5');\nvar logger = require('../util/logger');\n\n// call these two upfront so log messages emitted by them only show up once\nvar configFile = getConfigFile();\nvar installDirectory = getInstallDirectory();\n\n/**\n * @param {string} filename\n * @returns {string}\n */\nfunction getProjectFileContents(filename) {\n    var file = path.resolve(process.cwd(), filename);\n    return fs.readFileSync(file);\n}\n\n/**\n * @returns {{\n *   jspm?:{\n *     configFile?:string,\n *     directories?:{\n *       baseURL?:string,\n *       packages?:string\n *     }\n *   }\n * }}\n */\nfunction getPackageJson() {\n    return JSON.parse(getProjectFileContents('package.json'));\n}\n\n/**\n * @returns {string} default install directory or override from package.json (packages or baseURL)\n */\nfunction getInstallDirectory() {\n    var jspm = getPackageJson().jspm;\n    var defaultPath = 'jspm_packages';\n\n    if (jspm && jspm.directories && jspm.directories.packages) {\n        var configPath = jspm.directories.packages;\n        logger.logInfo('[jspm] jspm_packages located at ' + configPath + ' per package.json jspm.directories.packages');\n        return configPath;\n    }\n\n    if (jspm && jspm.directories && jspm.directories.baseURL) {\n        var baseUrlPath = path.join(jspm.directories.baseURL, defaultPath);\n        logger.logInfo('[jspm] jspm_packages located at ' + baseUrlPath + ' per package.json jspm.directories.baseURL');\n        return baseUrlPath;\n    }\n\n    return defaultPath;\n}\n\n/**\n * @returns {string} default config file or override from package.json (configFile or baseURL)\n */\nfunction getConfigFile() {\n    var jspm = getPackageJson().jspm;\n\n    if (!jspm) {\n        // return invalid filename, as \"jspm\" must exist inside package.json\n        return 'package.json(namespace:jspm)';\n    }\n\n    if (jspm.configFile) {\n        var configFile = jspm.configFile;\n        logger.logInfo('[jspm] config located at ' + configFile + ' per package.json jspm.configFile');\n        return configFile;\n    }\n\n    var baseURL = '';\n    if (jspm.directories && jspm.directories.baseURL) {\n        baseURL = jspm.directories.baseURL;\n        logger.logInfo('[jspm] config located in ' + baseURL + ' per package.json jspm.directories.baseURL');\n    }\n\n    var file = {\n        'jspm@0.16': path.join(baseURL, 'config.js'),\n        'jspm@0.17': path.join(baseURL, 'jspm.config.js')\n    };\n\n    // jspm changed default config filename in 0.17, so check for both\n    return fs.existsSync(file['jspm@0.17']) ? file['jspm@0.17'] : file['jspm@0.16'];\n}\n\n/**\n * @returns {string}\n */\nfunction getJspmVersion() {\n    var rawMultilineOutput = shell.exec('jspm --version', {silent: true}).output;\n    var version = rawMultilineOutput.split('\\n')[0] || 'UnknownVersion';\n    return version.trim();\n}\n\n/**\n * @returns {string} md5 from jspm config file contents\n */\nfunction getConfigurationHash() {\n    return md5(JSON.stringify({\n        'package.json => jspm': getPackageJson().jspm,\n        'config.js': getProjectFileContents(configFile)\n    }));\n}\n\nmodule.exports = {\n    cliName: 'jspm',\n    getCliVersion: getJspmVersion,\n    configPath: configFile,\n    installDirectory: installDirectory,\n    addToArchiveAndRestore: configFile,\n    installCommand: 'jspm install',\n    getFileHash: getConfigurationHash\n};\n","/home/travis/build/npmtest/node-npmtest-npm-cache/node_modules/npm-cache/cacheDependencyManagers/npmConfig.js":"'use strict';\n\nvar path = require('path');\nvar shell = require('shelljs');\nvar fs = require('fs');\nvar md5 = require('md5');\nvar logger = require('../util/logger');\n\n\n// Returns path to configuration file for npm. Uses\n// npm-shrinkwrap.json if it exists; otherwise,\n// defaults to package.json\nvar getNpmConfigPath = function () {\n  var shrinkWrapPath = path.resolve(process.cwd(), 'npm-shrinkwrap.json');\n  var packagePath = path.resolve(process.cwd(), 'package.json');\n  if (fs.existsSync(shrinkWrapPath)) {\n    logger.logInfo('[npm] using npm-shrinkwrap.json instead of package.json');\n    return shrinkWrapPath;\n  } else {\n    return packagePath;\n  }\n};\n\nfunction getFileHash(filePath) {\n  var json = JSON.parse(fs.readFileSync(filePath));\n  return md5(JSON.stringify({\n    dependencies: json.dependencies,\n    devDependencies: json.devDependencies\n  }));\n}\n\nmodule.exports = {\n  cliName: 'npm',\n  getCliVersion: function getNpmVersion () {\n    return shell.exec('npm --version', {silent: true}).output.trim();\n  },\n  configPath: getNpmConfigPath(),\n  installDirectory: 'node_modules',\n  installCommand: 'npm install',\n  getFileHash: getFileHash\n};\n"}